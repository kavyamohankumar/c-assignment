//Sonal

#include <iostream>
#include <stack>
#include <string>
#include <cstdlib>
using namespace std;
int main()
{
    stack<int> st;
    int choice, item;
    while (1)
    {
        cout<<"\n---------------------"<<endl;
        cout<<"Stack Implementation in Stl"<<endl;
        cout<<"\n---------------------"<<endl;
        cout<<"1.Insert Element into the Stack"<<endl;
        cout<<"2.Delete Element from the Stack"<<endl;
	cout<<"3.Size of the Stack"<<endl;
        cout<<"4.Top Element of the Stack"<<endl;
        cout<<"5.Exit"<<endl;
        cout<<"Enter your Choice: ";
        cin>>choice;
        switch(choice)
        {
        case 1:
            cout<<"Enter value to be inserted: ";
            cin>>item;
            st.push(item);
            break;
        case 2:
            item = st.top();
            st.pop();
	    cout<<"Element "<<item<<" Deleted"<<endl;
            break;   
        case 3:
	    cout<<"Size of the Queue: ";
	    cout<<st.size()<<endl;
            break;
        case 4:
	    cout<<"Top Element of the Stack: ";
	    cout<<st.top()<<endl;
            break;
        case 5:
            exit(1);
	    break;
        default:
            cout<<"Wrong Choice"<<endl;
        }
    }
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Shriya

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() 
{
    vector<int> v ;
    int x,i,j; 
    int n; 
    cin>>n;
    for(i =0 ; i<n ; i++)
    {
        cin>>x; 
        v.push_back(x);
    }
    int q1, q2, q3;
    cin>>q1;
    cin>>q2>>q3;
    v.erase (v.begin()+(q1-1));
    v.erase(v.begin()+q2-1 , v.begin()+q3-1);
    cout << v.size() << endl;
    for(j =0 ; j< v.size() ; j++)
    {
        cout << v.at(j) << " " ;  
    }
return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------
//Manjunath

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int main()
{
int n,i;
cout<<"enter the number of ID's: "<<endl;
cin >> n;
vector<int> numbers(n, 0);
for(i = 0; i < n; i++)
{
cin >> numbers[i];
}
sort(numbers.begin(), numbers.end());
numbers.erase( unique( numbers.begin(), numbers.end() ), numbers.end() );
for(i = 0; i < n; i++)
{
cout << numbers[i] << " ";
}
return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Kedar

#include <iostream>
#include <iterator>
#include <map>
using namespace std;

int main()
{

map<int, int> m;

m.insert(pair<int, int>(1, 40));
m.insert(pair<int, int>(2, 30));
m.insert(pair<int, int>(3, 60));
m.insert(pair<int, int>(4, 20));
m.insert(pair<int, int>(5, 50));
m.insert(pair<int, int>(6, 50));
m.insert(pair<int, int>(7, 10));




map<int, int>::iterator itr;
cout << "\nThe map m is : \n";
cout << "\tKEY\tELEMENT\n";
for (itr = m.begin(); itr !=m.end(); ++itr) {
cout << '\t' << itr->first << '\t' << itr->second
<< '\n';
}
cout << endl;


// lower bound and upper bound for map
cout << "m.lower_bound(5) : "
<< "\tKEY = ";
cout << m.lower_bound(5)->first << '\t';
cout << "\tELEMENT = " << m.lower_bound(5)->second
<< endl;
cout << "m.upper_bound(7) : "
<< "\tKEY = ";
cout << m.upper_bound(7)->first << '\t';
cout << "\tELEMENT = " << m.upper_bound(7)->second
<< endl;
}

//Shashipriya

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;int main()
{
    int n,i;
    cout<<"Enter the size: "<<endl;
    cin >> n;
    vector<int> numbers(n, 0);
    cout<<"Enter the numbers: "<<endl;
    for(i = 0; i < n; i++)
      {
        cin >> numbers[i];
      } 
   sort(numbers.begin(), numbers.end());
   cout<<"Numbers in sorted order: ";
    for(i = 0; i < n; i++)
    {
    cout << numbers[i] << " ";
    }
    return 0;
}
